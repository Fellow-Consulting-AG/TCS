<?xml version="1.0" encoding="utf-8"?>
<mx:Window 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:control="gadget.control.*"
	width="960" height="540"
	showFlexChrome="false" transparent="true" systemChrome="none" xmlns:form="gadget.form.*"
	initialize="initial()"
	creationComplete="init();"
	close="closeDetail();"  
	keyDown="keyDown(event);"
	resizable="true"
	minHeight ="540" 
	minWidth="960"
	layout="absolute" 
	windowResize="checkTips()"
	>
	
	<mx:Script>
		<![CDATA[
			import flexunit.utils.ArrayList;
			
			import gadget.chatclient.CRMXAMPPConnection;
			import gadget.control.AutoComplete;
			import gadget.control.AutoCompleteAddress;
			import gadget.control.CalculatedField;
			import gadget.control.CalendarIlog;
			import gadget.control.CloseableToolTip;
			import gadget.control.ImageTextInput;
			import gadget.control.ImageTreeFinder;
			import gadget.dao.BaseDAO;
			import gadget.dao.DAOUtils;
			import gadget.dao.Database;
			import gadget.dao.PreferencesDAO;
			import gadget.dao.SupportRegistry;
			import gadget.i18n.i18n;
			import gadget.lists.Calendar;
			import gadget.lists.List;
			import gadget.service.LocaleService;
			import gadget.service.PicklistService;
			import gadget.service.RightService;
			import gadget.service.SupportService;
			import gadget.service.UserService;
			import gadget.util.ActivityDataUtils;
			import gadget.util.DateUtils;
			import gadget.util.FeedUtils;
			import gadget.util.FieldUtils;
			import gadget.util.GUIUtils;
			import gadget.util.ImageUtils;
			import gadget.util.LayoutUtils;
			import gadget.util.ObjectUtils;
			import gadget.util.PDFUtil;
			import gadget.util.PreferenceUtils;
			import gadget.util.Relation;
			import gadget.util.SQLUtils;
			import gadget.util.StringUtils;
			import gadget.util.Utils;
			import gadget.util.Validation;
			import gadget.window.WindowManager;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Form;
			import mx.containers.FormItem;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.ButtonBar;
			import mx.controls.CheckBox;
			import mx.controls.ComboBox;
			import mx.controls.DataGrid;
			import mx.controls.DateField;
			import mx.controls.Image;
			import mx.controls.Label;
			import mx.controls.NumericStepper;
			import mx.controls.Text;
			import mx.controls.TextArea;
			import mx.controls.TextInput;
			import mx.controls.VRule;
			import mx.core.UIComponent;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			import mx.events.NumericStepperEvent;
			import mx.managers.DragManager;
			import mx.managers.IFocusManagerComponent;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			import org.igniterealtime.xiff.events.RoomEvent;
			[Bindable] private var itemSR:Object;
			[Bindable] public var item:Object;
			[Bindable] public var entity:String;
			[Bindable] public var subtype:int = 0;
			[Bindable] public var subtypeActivity:int = 0;
			[Bindable] public var create:Boolean = false;
			[Bindable] public var refreshHomTask:Function;
			
			private var itemBefore:Object;
			
			[Bindable] private var innerCanvasL:Array = new Array();
			[Bindable] private var leftFormL:Array = new Array();
			[Bindable] private var vruleL:Array = new Array();
			[Bindable] private var rightFormL:Array = new Array();
			[Bindable] private var heightLeftL:Array = new Array();
			[Bindable] private var heightRightL:Array = new Array();
			
			// variable to show/hide the button
			[Bindable] private var showPDFExportBtn:Boolean = true;
			[Bindable] private var showGroupingPDFBtn:Boolean;
			[Bindable] private var showOrderUserStatusBtn:Boolean;
			[Bindable] private var showLeadConvertBtn:Boolean;
			[Bindable] private var showKitchenReport:Boolean;
			
			[Bindable] public var isReadOnlyFields:Boolean = false;
			
			private var isShowFeed:Boolean;
			private var currentUser:Object; 
			private var buttonBar:ButtonBar=null;
			private const CALL:int =2;
			private const APPOINTMENT:int=1;
			private const TASK:int=0;
			private var numOfPage:int = 4;
			
			private var titleDetail:String;
			public var calendar:Calendar;
			public var calendarIlog:CalendarIlog;
			//public var closeRecordTypePopup:Function ;
			public var mainWindow:MainWindow;
			//public var recordTypeSelected:Object;
			public var showMessageSynchronize:Function;
			public var refreshFunction:Function;
			private var fields:ArrayCollection;
			private var customFields:ArrayCollection =new ArrayCollection();
			private var validators:Array = [];
			private var componentFirstFocus:IFocusManagerComponent;
			
			private var modified:Boolean = false;
			private var addresses:Array = [];

			//status of service request
			private var srOldStatus:String;
			private var oldDGD:String;
			private var serviceEntity:String=Database.serviceDao.entity;
			public var isDisableBtnUpdate:Boolean = true;
			private static const EXTENSION_IMAGE_FILE:Array = [".PNG", ".png", ".GIF", ".gif", ".jpg", ".JPG"];
			private var hasSave:Boolean = false;
			
			public static const DUMMY_OID:String = "dummy";
			
			private static const NEW_STR:String = i18n._('GLOBAL_NEW');						
			private static const CREATE_STR:String = i18n._('GLOBAL_CREATE');
			private static const UPDATE_STR:String = i18n._('GLOBAL_UPDATE');
			private static const CLOSE_STR:String = i18n._('GLOBAL_CLOSE');
			private static const CANCEL_STR:String = i18n._('GLOBAL_CANCEL');
			private var listChild:ArrayCollection;
			private var userOwner:Object;
		    private function openConvertLead():void{
				var convertLead:ConvertLead= new ConvertLead();
				//convertLead.finderClick = referenceClick;
				convertLead.itemLead=item;
				WindowManager.openModal(convertLead);
			}		
			private function setOrderUserStatus(status:String):void{
				var key:Array = new Array();
				if(status == "AP"){
					item.CustomPickList11 = ""; //Change Request #1185 clear order final status 
					item.CustomPickList10 = "AWPT";
					key.push("CustomPickList10");
					key.push("CustomPickList11");
				}else if(status == "SU"){
					item.CustomPickList11 = "";
					item.CustomPickList10 = "SUSP";
					key.push("CustomPickList10");
					key.push("CustomPickList11");
				}
				if(status == "TC"){
					item.CustomPickList10 = "ONST";
					item.CustomPickList11 = "TECO";
					key.push("CustomPickList10");
					key.push("CustomPickList11");					
					//#1118 CRO
					item.CustomDate3 = DateUtils.format(GUIUtils.getUTCDateTime(),DateUtils.DATABASE_DATETIME_FORMAT);
					key.push("CustomDate3");
					
				}
				for(var i:int=0; i<fields.length; i++){
					if (!StringUtils.startsWith(fields[i].column_name, "#") && !StringUtils.startsWith(fields[i].column_name, "{")) {
						var fieldInfo:Object = FieldUtils.getField(entity, fields[i].column_name);
						if(fieldInfo && fieldInfo.element_name!="picture"){
							for(var j:int=0; j<key.length; j++){
							if(key[j].indexOf(fieldInfo.element_name) != -1 )
								GUIUtils.setInputFieldValue(fields[i].component, fieldInfo, item[fieldInfo.element_name],fields[i].customField,fields);
							}
						}
					}
					
				}
				

			}
			private function printServiceRequest(isPreview:Boolean):void{
				var groupingWindow:GroupingPDF = new GroupingPDF();
				groupingWindow.width=450;
				groupingWindow.height=350
				groupingWindow.isPreview = isPreview;
//				itemSR = new Object();
				for (var i:int = 0; i < fields.length; i++) {
					if (!StringUtils.startsWith(fields[i].column_name, "#") && !StringUtils.startsWith(fields[i].column_name, "{")) {
												
						var fieldInfo:Object = FieldUtils.getField(entity, fields[i].column_name);
						if(fieldInfo && fieldInfo.element_name!="picture"){
							item[fieldInfo.element_name] = GUIUtils.getInputFieldValue(fields[i].component, fieldInfo);
						}
					}else if(fields[i].column_name.indexOf(CustomLayout.CUSTOMFIELD_CODE) > -1){
						var objCusField:Object = Database.customFieldDao.selectCustomField(entity,fields[i].column_name,LocaleService.getLanguageInfo().LanguageCode);
						var cusFieldInfo:Object = FieldUtils.getField(entity, fields[i].column_name);
						item[objCusField.fieldName] = GUIUtils.getInputFieldValue(fields[i].component, cusFieldInfo);
					}
				}
//				itemSR.gadget_id = item.gadget_id;
//				itemSR.ServiceRequestId = item.ServiceRequestId
				// Validate Service Request				
				var srValid:Boolean = FieldUtils.isValidPrintServiceRequest(item);
				if(!isPreview && !srValid){
					
					Alert.show(i18n._('GLOBAL_Service_ORDER_MESSAGE'), i18n._(""), Alert.OK, this);
					return;					
				}
				
				groupingWindow.serviceRequest = item;
				groupingWindow.refreshDetail = refreshData;
				groupingWindow.postExport = postExport;
				WindowManager.openModal(groupingWindow);
			}
			
			private function diplayKitchenReport():void {
				var kitchenReport:KitchenReport = new KitchenReport();
				kitchenReport.item = item;
				WindowManager.openModal(kitchenReport);
			}
			
			private function setFirstFocus(event:Event = null):void
			{
				if (componentFirstFocus != null) {
					focusManager.setFocus(componentFirstFocus);
				} 
			}
			private function initial():void{
				subtypeActivity = subtype;
				initButtons(); 
				initTab(); 
				initForm(); 
				displayAttachments(); 
				initDragDropWindow();
			}
				
			private function keyDown(evt:KeyboardEvent):void {
				//bug #452
				if (evt.charCode == Keyboard.ESCAPE) {
					this.close();
				}
			}

			private function closeDetail():void {
				if (create) {
					// delete support entities
					// we should also delete normal entities...
					handleSupportEntities(true);
	
				}
			}
			
			/**
			 * Function that handles embedded entities that were created in the detail.
			 */
			private function handleSupportEntities(doDelete:Boolean):void {
				var oidName:String = DAOUtils.getOracleId(entity);
				for each (var supportEnt:String in SupportRegistry.allEntities()) {
					var supportDao:BaseDAO = Database.getDao(supportEnt);
					var myArray:Array = ObjectUtils.keys(SupportRegistry.allFields(supportEnt));
					if (myArray.indexOf(oidName) != -1) {
						var stuffToDelete:ArrayCollection = supportDao.findAll(new ArrayCollection(), oidName + " = '" + Detail.DUMMY_OID + "'");
						for each (var suppItem:Object in stuffToDelete) {
							var fullItem:Object = supportDao.findByGadgetId(suppItem.gadget_id)
							if (doDelete) {
								supportDao.delete_(fullItem);	
							} else {
								fullItem[oidName] = "#" + item.gadget_id;
								supportDao.update(fullItem);
							}
						}
					}
				}
			}
			
			private function commit():Boolean {
				
				var strCreateOrUpdate:String = create ? "Create" : "Update";
				var msgObj:Object = null;
				
				if(isShowFeed){
					msgObj = new Object();
					msgObj.Entity = entity;
					msgObj.IsParent = "true";
					msgObj.CommentText = "";
					msgObj.Operation = strCreateOrUpdate;
					itemBefore = Utils.copyModel(item);
				}
				
				var validatorErrorArray:Array = Validator.validateAll(validators);
				for (var i:int = 0; i < fields.length; i++) {
					if (!StringUtils.startsWith(fields[i].column_name, "#") && !StringUtils.startsWith(fields[i].column_name, "{")) {
						if(!fields[i].readonly){
							FieldUtils.readValidationRule(validatorErrorArray, fields[i], entity);	
						}						
						var fieldInfo:Object = FieldUtils.getField(entity, fields[i].column_name);
						if(fieldInfo && fieldInfo.element_name!="picture"){
							item[fieldInfo.element_name] = GUIUtils.getInputFieldValue(fields[i].component, fieldInfo);
						}
					}else if(fields[i].column_name.indexOf(CustomLayout.CUSTOMFIELD_CODE) > -1){
					    var objCusField:Object = Database.customFieldDao.selectCustomField(entity,fields[i].column_name,LocaleService.getLanguageInfo().LanguageCode);
						var cusFieldInfo:Object = FieldUtils.getField(entity, fields[i].column_name);
						item[objCusField.fieldName] = GUIUtils.getInputFieldValue(fields[i].component, cusFieldInfo);
					}
				}
				
				//only jd user
				//check Damag group description
				if(entity== Database.serviceDao.entity 
					&& UserService.DIVERSEY==UserService.getCustomerId()
					&& oldDGD!=item["CustomText39"]			
				
				){
					var pickId:String = PicklistService.getId(entity,"CustomPickList9",item["CustomText39"],LocaleService.getLanguageInfo().LanguageCode);
					if(item['CustomPickList9']==null){
						item['CustomPickList9']= pickId;
					}
					pickId = PicklistService.getId(entity,"CustomPickList8",item["CustomText39"],LocaleService.getLanguageInfo().LanguageCode);
					if(item['CustomPickList8']==null){
						item['CustomPickList8']= pickId;
					}
					
					
				}
				
				
				
				//only JD user
				GUIUtils.calculateTotalHours(item,entity);
				
				
				if(!checkAutoComplete(true)) return false;
				
				// updateItemFields();
				
				/*for (i = 0; i < fields.length; i++) {
					// if(fields[i].col>1) continue;
					if (!StringUtils.startsWith(fields[i].column_name, "#") && !StringUtils.startsWith(fields[i].column_name, "{")) {
						FieldUtils.readValidationRule(validatorErrorArray, fields[i], entity);
					}
				}*/
			
				if (validatorErrorArray.length != 0) {
					var errorMessageArray:Array = [];
					for each (var err:Object in validatorErrorArray) {
						var errField:String = ''; 
						if (err.currentTarget) {
							var parent:DisplayObject = err.currentTarget.source.parent; 
							if(parent is FormItem){
								errField = (parent as FormItem).label + " : ";
							}else if(parent.parent is FormItem){
								errField = (parent.parent as FormItem).label + " : ";
							} 
//							errField = FormItem(err.currentTarget.source.parent).label + " : ";
						}
						errorMessageArray.push(errField +Utils.getTranslatedValidation(err.message));
					}
					//CRO 05.01.2011
					Alert.show(errorMessageArray.join("\n"), i18n._('GLOBAL_INVALID_FORM'), Alert.OK, this);
					return false;
				}
				
				if (entity == Database.activityDao.entity) {
					//Activity --> Task and Appointment   //Call is an appointment
					//-- VM change subtype --> subtypeActivity(Task,Appointment,Call) but value is not change (subtype is dynamic condition layout)
					//item["Activity"] = subtypeActivity == 0 ? "Task" : "Appointment";
					if(subtypeActivity ==APPOINTMENT || subtypeActivity==CALL){
						item["Activity"] = "Appointment";
					}else{
						item["Activity"] = "Task"; 
					}
					
					if(subtypeActivity==CALL) item["Type"] = "Call";
					// hardcoded fix for Thomas
					if (create && StringUtils.isEmpty(item["CallType"])) {
						if (subtypeActivity == CALL) {
							item["CallType"] = "Account Call";
						}
						if (subtypeActivity == TASK || subtypeActivity ==APPOINTMENT) {
							item["CallType"] = "General";
						}
					}
				}
				
				// vm -- join field value
				//CRO #833
				/*if(create){
					Utils.doFomulaField(entity,item,true);
				}*/
				if(Database.serviceDao.entity==entity){
					item.GroupReport = item.GroupReport == "true" ? 1 : 0 ; 
					
				}
				// set modified date to current date
				if("Product"==entity){
					item["ModifiedByDate"] =DateUtils.format(new Date(), DateUtils.DATABASE_DATETIME_FORMAT);;
				}else{
					item["ModifiedDate"] =DateUtils.format(new Date(), DateUtils.DATABASE_DATETIME_FORMAT);;
				}

				if (entity == "Contact") item["ContactFullName"] = item["ContactFirstName"] + ' ' + item["ContactLastName"];
				
				var errorMsg:String = Validation.checkItem(entity, item);
				if (errorMsg != null) {
					Alert.show(errorMsg, i18n._('DETAIL_ALERT_TITLE_THERE_ARE_ERRORS'), Alert.OK, this);
					return false;
				}
				var oidName:String = DAOUtils.getOracleId(entity);
				
				// check validatio rule before save.
				if(GUIUtils.checkValidationRule(item,entity,this,sqlQueryObjects)) return false;
				var objTree:Object = item.objTree;	
				// save tree key
				if(objTree != null) {
					for each(var fld:String in objTree) {
						item[fld] = objTree[fld];
					}
				}
				if (create) {
					
					item["deleted"] = false;
					item["error"] = false;
					item["OwnerId"] = item["OwnerId"] == null || item["OwnerId"]=="" ? Database.userDao.read().id : item["OwnerId"];
					delete item[oidName];
					Database.getDao(entity).insert(item);					
					item = Database.getDao(entity).selectLastRecord()[0];
					// by default, sets the OracleId as gadget_id
					item[oidName] = "#" + item.gadget_id;
					
					// check custom picklist value
					GUIUtils.saveCustomPicklistValue(item,fields,entity,this);
					Database.getDao(entity).update(item);
					// update support entities OracleId
					// we should also update normal entities...
					handleSupportEntities(false);
				} else {
					var foracleId:String = DAOUtils.getOracleId(entity);
					var oracleId:String = item[foracleId];
					
					item.local_update = new Date().getTime();
					
					
					
					item.ms_local_change = new Date().getTime();
//					Database.getDao(entity).update(item);
//					var oracle_id:String=item[oidName] as String;
					// Change Request #226
//					if(entity==serviceEntity && Database.preferencesDao.getBooleanValue(PreferencesDAO.ENABLE_BUTTON_SR_SYNC_ACCEPT_UNACCEPT)){
//						item.StatusModified=false;
//						if(oracle_id.indexOf("#")==-1 && item.CustomPickList10!=srOldStatus){
//							if(srOldStatus=="ONST"||srOldStatus=="ACPT"){
//								if(item.CustomPickList10 == "ONST" || item.CustomPickList10 == "ACPT" ){								
//									item.StatusModified=true;									
//									new JDUpdateServiceRequest([item]).start();
//								}
//							}
//						}
//						ServiceDAO(Database.getDao(entity)).updateStatusModified(item);
//					}	
					
					// check custom picklist value
					GUIUtils.saveCustomPicklistValue(item,fields,entity,this);	
					Database.getDao(entity).update(item);
					updateRelationFields(item);
						
					if(isShowFeed){
						for(var property:String in itemBefore){
							if(property == "ModifiedDate" || property == "local_update" || property == "ms_local_change") continue;
							if(itemBefore[property] != item[property]){
								msgObj.CommentText += property + " to " + item[property] + "\n";
							}
						}
						
					}
					
				}
				
				Utils.updateFieldByChild(entity,item);
				
				if(chkFeed.selected){
					msgObj.RecordName = FeedUtils.getRecordName(item,entity);
					msgObj.RecordId = item[oidName];
					FeedUtils.formatAndSendFeed( msgObj );
					var isFeedEntityExist:Boolean = Database.feedEntityDAO.isFeedEntityExist( entity,item['gadget_id'] );
					if(!isFeedEntityExist){
						var feedEntity:Object = {'Entity':entity, 'Id':item['gadget_id'], 'OwnerId': item['OwnerId'], 'Alias':item['Alias']};
						Database.feedEntityDAO.insert(feedEntity);
					}
				}else{
					if(isShowFeed){
						Database.feedEntityDAO.delete_( {'Entity':entity, 'Id':item['gadget_id']} );
					}
				}
				hasSave=true;
				
				if(refreshHomTask != null) refreshHomTask(); //1243 CRO
				refreshFunction(item);
				if(calendar && entity == Database.activityDao.entity) calendar.loadData();
				if(calendarIlog && entity == Database.activityDao.entity) calendarIlog.loadData();
				modified == false; //reset the value
				//#1061 CRO
				if(mainWindow.refreshDashboard != null) mainWindow.refreshDashboard();
				return true;
			}
			
			private function updateRelationFields(dest:Object):void{
//				var relations:ArrayCollection = Relation.getReferencers(entity);
//				if(relations.length>0){
//					Database.begin();
//					for each(var obj:Object in relations){
//						var criteria:Object={};
//						criteria[obj.keySrc]=dest[obj.keyDest]						
//						var values:Object={};
//						var labelDest:Array=obj.labelDest;
//						var labelSrc:Array=obj.labelSrc;
//						for (var i:int=0 ;i<labelDest.length;i++){
//							values[labelSrc[i]]=dest[labelDest[i]]
//							
//						}
//						var dao:BaseDAO=Database.getDao(obj['entitySrc'])
//						dao.updateRelationFields(values,criteria);
//					}
//					Database.commit();
//				}
				Utils.updateRelationFields(dest,entity);
			}
			
			/**
			 * Update the item fields with the values in input fields.
			 */
			public function updateItemFields():void { 
				for (var i:int = 0; i < fields.length; i++) {
					// if(fields[i].col>1) continue;
					if (!StringUtils.startsWith(fields[i].column_name, "#") && !StringUtils.startsWith(fields[i].column_name, "{")) {
						var fieldInfo:Object = FieldUtils.getField(entity, fields[i].column_name);
						// item[fieldInfo.element_name] = GUIUtils.getInputFieldValue(fields[i].component, fieldInfo);
						if(fieldInfo && fieldInfo.element_name!="picture"){
							item[fieldInfo.element_name] = GUIUtils.getInputFieldValue(fields[i].component, fieldInfo);
						}
					}
				}
			}
			
			public function checkAutoComplete(alertMessage:Boolean=false):Boolean {
				for (var i:int = 0; i < fields.length; i++) {
					if (fields[i].component is AutoComplete) {
						var fieldInfo:Object = FieldUtils.getField(entity, fields[i].column_name);
						var value:String = (fields[i].component as AutoComplete).text;
						var picklist:ArrayCollection = (fields[i].component as AutoComplete).dataProvider as ArrayCollection;
						var found:Boolean = false;
						for each (var pickValue:Object in picklist) {
							if (value.toLowerCase() == pickValue.label.toLowerCase()) {
								(fields[i].component as AutoComplete).typedText = pickValue.label;
								item[fieldInfo.element_name] = pickValue.data;
								found = true; break;
							}
						}
						if (!found) {
							//CRO 05.01.2011
							if(alertMessage) Alert.show(i18n._('GLOBAL_VALUE') + " '" + value + "' " + i18n._('DETAIL_ALERT_TEXT_IS_INVALID'), i18n._('DETAIL_ALERT_TITLE_THERE_ARE_ERRORS'), Alert.OK, this);
							return false;				
						}
					}
				}
				return true;
			}

			private function initButtons():void {
				if(!create && Database.leadDao.entity==entity && Database.preferencesDao.getBooleanValue(PreferencesDAO.ENABLE_CONVERT_LAED)){
					btnLeadConvert.visible = true ;
				}else{
					btnLeadConvert.width = 0 ;
				}
				if(Database.preferencesDao.getBooleanValue(PreferencesDAO.DISABLE_EXPORT_PDF_BUTTON)){
					pdfExportBtn.includeInLayout = false;
					pdfExportBtn.visible = false;
				}
				//Change Request 645 CRO
				if(!create && entity == Database.serviceDao.entity && UserService.DIVERSEY==UserService.getCustomerId()){
					// show button groupingPDF, groupPDFPreview
					showGroupingPDFBtn = true;
				}
				//Change Request # 781 CRO
				if(entity == Database.serviceDao.entity && UserService.DIVERSEY==UserService.getCustomerId()){
					// show button btnAP, btnSU, btnTC
					showOrderUserStatusBtn = true;
				}else{
					// hide button btnAP, btnSU, btnTC
					showOrderUserStatusBtn = false;
				}
					
				var canCreate:Boolean = RightService.canCreate(entity);
				var canUpdate:Boolean = RightService.canUpdate(entity);
				if(!create ){
					var currentUser:Object = Database.userDao.read();
					canUpdate=RightService.canUpdate(entity,currentUser.id==item.OwnerId);
				}
				
				actionCanvas.removeAllChildren();
				buttonBar = new ButtonBar();
				buttonBar.setStyle("right", "0");
				//buttonBar.percentWidth = 100;
				var obj:Object = null;
				var buttons:ArrayCollection = new ArrayCollection();
				
				
				attachmentBtn.enabled = canUpdate;
				buttons.addItem({label: CANCEL_STR, icon:ImageUtils.cancelIcon}); 
				var disable:Boolean = create ? !canCreate : !canUpdate;
				
				//mony-bug#50---only jd user
				var oidName:String = DAOUtils.getOracleId(entity);
				var odiVal:String=item[oidName] as String;
				// Change Request #226
				/*if(!create &&(odiVal.indexOf('#')==-1) && entity==serviceEntity 
					&& Database.preferencesDao.getBooleanValue(PreferencesDAO.ENABLE_SR_SYNC_ORDER_STATUS)){					
					if(item.CustomPickList10=="STND" || item.CustomPickList10=="ACPT" || item.CustomPickList11=="TECO"  ){  
						disable=true;
						comboAction.enabled=false;
					}
				}*/
				//Bug #1497 CRO
				if(!GUIUtils.isEnableSR(this)){
					disable=true;
					comboAction.enabled=false;
				}
				//Bug fixing 466 isReadOnlyFields uses for display only not editable fields
				if(isReadOnlyFields){
					disable = true;
					comboAction.enabled = false;
					// hide button groupingPDF, groupPDFPreview
					showGroupingPDFBtn = false;
				}
				isDisableBtnUpdate = disable;
				buttons.addItem({label: create? CREATE_STR : UPDATE_STR, icon: create? ImageUtils.addIcon : ImageUtils.editIcon, disabled: disable});

				buttonBar.dataProvider = buttons;
				buttonBar.addEventListener(ItemClickEvent.ITEM_CLICK, handleButtonBar);
				actionCanvas.addChild(buttonBar);
				for(var index:int = 0; index<buttonBar.dataProvider.length; index++){
					var data:Object = buttonBar.dataProvider[index];
					if(data.disabled == true){
						var btn:Button = buttonBar.getChildAt(index) as Button;
						btn.enabled = false;
					}
				}
				if(UserService.getCustomerId() == UserService.DIVERSEY){
					layoutNextButton.visible = false;
				}
				showKitchenReport = UserService.getCustomerId() == UserService.DIVERSEY;
			}
			
			override public function close():void{
				Database.begin();
				try{
					if(hasSave){
						//delete add new
						for each(var subEntity:String in listChild){
							
							Database.getDao(subEntity).updateTempField(false);
						}
					}else{
						//delete add new
						for each(var cancelEntity:String in listChild){
							
							Database.getDao(cancelEntity).deleteTempRecordByParentId({});//delete all temp record
						}
					}
					Database.commit();
				}catch(e:SQLError){
					Database.rollback();
				}
				
				super.close();				
			}
			
			private function postExport(obj:Object):void{
				//refresh list after export
				if(refreshFunction!=null){
					refreshFunction(obj);
				}
				//save sub list object
				hasSave = true;
				//#7304
				this.close();
				/*
				if(buttonBar != null){
					for(var i:int = 0; i<buttonBar.dataProvider.length; i++){
						var data:Object = buttonBar.dataProvider[i];
						if(data.label == UPDATE_STR){
							var btn:Button = buttonBar.getChildAt(i) as Button;
							btn.enabled = false;
							break;
						}
					}
				}
				
				
				*/
			}
			private function getComboData():ArrayCollection{
				var listTransaction:ArrayCollection = Database.transactionDao.listTransaction();
	            var comboList:ArrayCollection = new ArrayCollection();
	            comboList.addItem({label:CLOSE_STR, data:CLOSE_STR});
				for(var i:int = 0; i < listTransaction.length; i++){
					var transaction:Object = listTransaction[i];
					if(transaction.enabled == 1){
						var NEW_PLUS_SPACE:String = NEW_STR + " ";
		                comboList.addItem({label:NEW_PLUS_SPACE + Database.customLayoutDao.getDisplayName(transaction.entity), data:transaction.entity});
						if(transaction.entity == "Activity"){
							comboList.addItem({label:NEW_PLUS_SPACE + Database.customLayoutDao.getDisplayName(transaction.entity, 1), data:transaction.entity, subtype: 1});
							// Change Request #440
							if(Database.preferencesDao.getBooleanValue(PreferencesDAO.ENABLE_BUTTON_ACTIVITY_CREATE_CALL))
								comboList.addItem({label:NEW_PLUS_SPACE + Database.customLayoutDao.getDisplayName(transaction.entity, 2), data:transaction.entity, subtype: 2});
						}
					}		
				}
				return comboList;
			}
			
			private function handleButtonBar(event:ItemClickEvent):void {
				var close:Boolean = true;
				var list:List = mainWindow.navigator.selectedChild as List;
				if (event.label == CREATE_STR || event.label == UPDATE_STR) {
					close = commit();				
				}
				if (close) {
					if (event.label != CANCEL_STR) {
						addEventListener(Event.CLOSE, nextAction);
						this.close();
					}else{
						if(item.picture!=null && list.detail.item!=null) list.detail.item.picture = item.picture;
						//Change Request #4851 CRO
						if(entity == Database.serviceDao.entity){
							Utils.closingSR(this);
						}else{
							this.close();
						}
						
						return;
					}
					
				}
//				addRecentlyViewed(item);
				list.filterData();
				list.initGridColumns();
				list.detail.loadData();
				
				
			}
			
			private function closeDetailForm():void{
				this.close();
			}
//			private function addRecentlyViewed():void
//			{
//				if(item.gadget_id != null){
//					var recentObj:Object = {'entity':entity, 'id':item.gadget_id};
//					Database.recentDao.insert_recently(recentObj);
//				}
//			}
			
			private function nextAction(event:Event):void {
				var data:String = comboAction.selectedItem.data;
				if (data != CLOSE_STR) {
					var other:Object = new Object();
					var referencers:ArrayCollection = Relation.getReferencers(item.gadget_type);
					for each (var relation:Object in referencers) {
						if (relation.entitySrc == data && relation.entityDest == item.gadget_type) {
							other[relation.keySrc] = item[relation.keyDest];
							for(var i:int=0; i<relation.labelDest.length; i++){
								other[relation.labelSrc[i]] = item[relation.labelDest[i]];
							}
//							other[relation.labelSrc] = item[relation.labelDest];
						}
					}
					// default values for call, appointment, task
					var aData:Object;
					if(comboAction.selectedItem.subtype == 2 && data == 'Activity') {
						aData = ActivityDataUtils.getActivityData(ActivityDataUtils.CALL_SUBTYPE);
					}else if(comboAction.selectedItem.subtype == 1 && data == 'Activity') {
						aData = ActivityDataUtils.getActivityData(ActivityDataUtils.APPOINTMENT_SUBTYPE);
					}else if(comboAction.selectedItem.subtype == 0 && data == 'Activity') {
						aData = ActivityDataUtils.getActivityData(ActivityDataUtils.TASK_SUBTYPE);
					}
					for (var key:String in aData) {
						other[key] = aData[key];
					}
					
					if(comboAction.selectedItem.subtype != null){
						mainWindow.selectList(data).openScreenCreate(other, comboAction.selectedItem.subtype);
						return;
					}
					mainWindow.selectList(data).openScreenCreate(other);
				}
			}
			
			public function displayAttachments():void{
				var attachments:ArrayCollection = Database.attachmentDao.selectAttachment(entity, item.gadget_id);
				var s:String = "";
				var index:int = 1;
				for each(var attachment:Object in attachments) {
					if (index%2==0){
						s += attachment.filename + ";\n";
					} else {
						s += attachment.filename + "; ";
					}
					index += 1;
				}
				//CRO 05.01.2011
				attachmentBtn.toolTip = s=="" ? i18n._('GLOBAL_ATTACHMENTS') : s.substr(0, s.length-1);
				
			}

			
		
			private function init():void {
				viewRestoreMaxWindow();
				currentUser = Database.currentUserDAO.getCurrentUser();
				var isEnabledFeedEntity:Boolean = Database.feedDAO.isFeedEnabled(entity);
				var isEnabledFeed:Boolean = Database.preferencesDao.getBooleanValue("enable_feed");
				isShowFeed = isEnabledFeed && isEnabledFeedEntity;
				
				chkFeed.visible = isShowFeed;
				chkFeed.includeInLayout = isShowFeed;
				
				if(isShowFeed && currentUser!=null){ 
					var isChkFeedExist:Boolean = Database.feedEntityDAO.isFeedEntityExist(entity,item['gadget_id']);
					chkFeed.selected = isChkFeedExist;
				}
				chkFeed_clickHandler(null);
				
				userOwner = Database.allUsersDao.ownerUser();
				// Sometimes, field info is missing for a field even after synchronization
				// so we should not display this message
				/* if(noFieldInfo){
					showMessageSynchronize();
					this.close();
					return;
				}  */

				//setIcon();
				//titleDetail = Utils.getTitle(entity,subtype,item,create);
				//setTitle(titleDetail);
				titleDetail = Utils.getTitle(entity,subtype,item,create);
				// setTitle(titleDetail);
				setTitleAsEdit(true);

				Utils.addRecentlyViewed(item);
				setFirstFocus();
				var disable_custom_layout:Boolean = Database.preferencesDao.getBooleanValue(PreferencesDAO.DISABLE_CUSTOM_LAYOUT) as Boolean;				
				customLayoutBtn.enabled = !disable_custom_layout;
				
			}
			
			public function setTitleAsEdit(initForm:Boolean=false):void {
				if(!modified){
					setTitle(initForm?titleDetail :"*" + titleDetail);
					setIcon(!initForm);
				}
				modified = !initForm;
			}
			
			private function setTitle(title:String):void {
				this.title = title;
				titleLabel.text = title;	
			}
			
			private function setIcon(isBlackWhite:Boolean = false):void {
				var customLayout:Object = Database.customLayoutDao.readSubtype(entity, subtype);
				var iconName:String = isBlackWhite ? customLayout.custom_layout_icon + "BW" : customLayout.custom_layout_icon;
				windowTitleBar.icon = ImageUtils.getIconByName(iconName);
				if(!StringUtils.isEmpty(customLayout.background_color)){
					windowTitleBar.setStyle("backgroundColor", customLayout.background_color);
				}else{
					var titleBarColor:String = Database.preferencesDao.getValue(PreferencesDAO.BACKGROUND_COLOR) as String; 
					if(!StringUtils.isEmpty(titleBarColor)) windowTitleBar.setStyle('backgroundColor',titleBarColor);					
				}
			} 
			
			private function upload_(fileName:String, data:Object):void {
				Database.contactDao.updateImage(data as ByteArray, item);
				var list:List = mainWindow.navigator.selectedChild as List;
				if(list.detail.item)
					list.detail.item.picture = item.picture;
				reload();
			}
			
			
			/**
			 * This function is called after an item has been created/updated/deleted
			 * in an inner list (SQL List or other)
			 */
			public function innerListUpdate():void {
				if(!create) {
					item.local_update = new Date().getTime();
					item.deleted = 0;
					//Database.getDao(entity).update(item);
					Database.getDao(entity).updateByField([],item);
					refreshFunction(item);
				}
				setTitleAsEdit();
				refreshLinkList();
			}
			
			
			private function initTab():void {
				for(var p:int=0;p<numOfPage;p++){
					var innerCanvas:Canvas = new Canvas();
					innerCanvas.setStyle('top', 36);
					innerCanvas.setStyle('left', 8);
					innerCanvas.setStyle('right', 8);
					innerCanvas.setStyle('bottom', 48);
					innerCanvas.horizontalScrollPolicy = "off";
					innerCanvas.percentHeight = 100;
					var hbox:HBox = new HBox();
					hbox.percentWidth=100;
					hbox.percentHeight=100;
					var leftForm:Form = new Form();
					leftForm.width = 460;
					leftForm.setStyle('paddingTop', 0);
					leftForm.setStyle('verticalGap', 4);
					var vRule:VRule = new VRule();
					var rightForm:Form = new Form();
					rightForm.width = 460;
					rightForm.setStyle('paddingTop', 0);
					rightForm.setStyle('verticalGap', 4);
					
					hbox.addChild(leftForm);
					hbox.addChild(vRule);
					hbox.addChild(rightForm);
					innerCanvas.addChild(hbox);
					//CRO 05.01.2011
					innerCanvas.label = i18n._('GLOBAL_PAGE') + " " + (p+1);
					viewstack.addChild(innerCanvas);
					
					innerCanvasL[p] = innerCanvas;
					leftFormL[p] = leftForm;
					vruleL[p] = vRule;
					rightFormL[p] = rightForm;
					
					heightLeftL[p] = 0;
					heightRightL[p] = 0;
					
				}	
				
			}
			
			private function getSubtypeLayout(item:Object):int{
				var s:int = -1;
				var data:ArrayCollection = Database.customLayoutDao.read(entity);
				if(data != null && data.length >0){
					var depend:String = "";
					for each (var obj:Object in data){
						depend = obj.layout_depend_on;
						if(!StringUtils.isEmpty(depend)){
							break;
						}
					}
					var cond:ArrayCollection = Database.customLayoutConditionDAO.findByParam(entity,item[depend]);
					if(cond.length>1){
						return 0;
					}else if(cond.length == 1){
						if(cond.getItemAt(0) != null){
							return cond.getItemAt(0).subtype;
						}
					}else{
						return checkContains(item[depend]);
					}
				}
				return s;
			}
			private var selectedAccountType:Object;
			private function checkContains(key:String):int{
				var s:int;
				var lstContains:ArrayCollection = Database.customLayoutConditionDAO.findByContain(entity);
				var tmp:Object = null;
				for each(var con:Object in lstContains){
					var contains:String = con.params;
					if(!StringUtils.isEmpty(contains)){
						for each(var str:String in contains.split(";")) {
							if(key == str){
								tmp = con;
								break;
								
							} 
						}
					}
					
				}
				if(tmp==null){
					// subtype = 0 is default layout
					s = -1;
					
				}else{
					s = tmp.subtype;
				}
				return s;
			}
			private function fireEventRecordTypeChange(cbo:ComboBox):void{
				selectedAccountType = cbo.selectedItem;
				
				/*
				var b:Boolean = false;
				var tmp:Object = null;
				var lstContains:ArrayCollection = Database.customLayoutConditionDAO.findByContain(entity);
				
					for each(var con:Object in lstContains){
						var contains:String = con.params;
						if(!StringUtils.isEmpty(contains)){
							for each(var str:String in contains.split(";")) {
								if(selectedAccountType.data == str){
									if(b){
										tmp = null;
										break;
									}
									tmp = con;
									b = true;
										
								} 
							}
						}
							
					}
				if(tmp==null){
					// subtype = 0 is default layout
					subtype = 0;
						
				}else{
					subtype = tmp.subtype;
				}
		*/
				subtype = 0;
				var cond:ArrayCollection =  Database.customLayoutConditionDAO.findByParam(entity,selectedAccountType.data);
				if(cond != null && cond.length >1){
					//subtype = -1;
				}else if(cond != null && cond.length ==1){
					var cusLayout:Object = cond.getItemAt(0);
					subtype = cusLayout.subtype;
					item[cusLayout.column_name] = selectedAccountType.data;
				}else{
					var contaain:int = checkContains(selectedAccountType.data);
					if(contaain != -1){
						subtype = contaain;
						item[cond] = selectedAccountType.data;
					}
				}
				
				item.subtype = subtype;
				reload();
				//var condition:ArrayCollection = Database.customLayoutConditionDAO.listRecordType(entity);
			}
			// set default Owner, OwnerId
			private function setActivityOwner():void {
				var user:Object = Database.userDao.read();
				if(user) {
					item["Owner"] = user.full_name;
					item["OwnerId"] = user.id;
				}
			}
			
			private var noFieldInfo:Boolean = false;
			private var sqlQueryObjects:ArrayCollection = new ArrayCollection();
			private var addr:Object = {};
			// PrimaryBillToCity, PrimaryBillToCountry, PrimaryBillToPostalCode, PrimaryBillToProvince, PrimaryBillToState
			private var mapAddressFields:Array = ["PrimaryBillToStreetAddress", "PrimaryBillToCity", "PrimaryBillToCountry", "PrimaryBillToPostalCode","MainPhone","MainFax"];
			private function initForm():void {
				hasSave =false;
				var readOnlyFields:Object = new Object();
				//bug#7306
				listChild = new ArrayCollection();
				//bug #1912
				for each(var obj:Object in Database.fieldManagementServiceDao.readAll(entity)){
					if(obj.Name && obj.ReadOnly == "true")
						readOnlyFields[SupportService.matchOOD(obj.Name)] = true;
				}
				
				// setIcon();
				//titleDetail = Utils.getTitle(entity,subtype,item,create);
				// setTitle(titleDetail);
				//setTitleAsEdit(true);
				
				//Bug fixing 466 CRO
				disableIcon();
				//----------
				//service status when load form
				if(entity==serviceEntity){
					srOldStatus=item.CustomPickList10;
					//old damage group description value
					oldDGD=item["CustomText39"];
					
				}
				
				item.gadget_type = entity;
				
				// Bug #126
				if(create) {
					setActivityOwner();
				}else {
					// For activities, we have to set here the owner name,
					// because the web service does not provide it (only the Id)
					if(entity == Database.activityDao.entity && item["OwnerId"] != "") {
						var user:Object = Database.allUsersDao.findByOracleId(item["OwnerId"]);
						if(user) {
							item["Owner"] = user.Alias;
							item["OwnerId"] = user.Id;
						}
					}
				}
				
				var type:String = '';
				if(!create && entity == Database.activityDao.entity){
					type = item['Activity'];
				}
//				if(create && selectedAccountType != null &&(entity == "Account" || entity == "Activity" && subtypeActivity == 0 && subtype !=0) ){
//					subtype = getSubtypeLayout(item);
//					if(subtype == -1){
//						subtype = subtypeActivity;
//					}
//				}
				//== SIEMEN Only ==//
				if(!create && (entity == Database.accountDao.entity || (entity == Database.activityDao.entity && type =='Task') )){
					//customLayoutBtn.visible = false;
					//customLayoutBtn.includeInLayout = false;
					

					subtype = getSubtypeLayout(item);
					if(subtype != -1){
						item.subtype = subtype;
					}
					if(!create && selectedAccountType == null && subtype == -1) {
						subtype = LayoutUtils.getSubtypeIndex(item);
						subtypeActivity = subtype;
					}
				}else if(!create) {
					subtype = LayoutUtils.getSubtypeIndex(item);
					subtypeActivity = subtype;
				}
				fields = Database.layoutDao.selectLayout(entity, subtype);
				
				//var objSubtype:Object = LayoutUtils.getObjectSubtype(entity,subtype+'');
					
				// var heightLeft:int = 0, heightRight:int = 0;			
				var nameFocus:String = "";
				var isAlreadyFocus:Boolean = false;
				
				var functions:Object = new Object();
				var pageIndex:int = 0;
				//height =0;
				functions._countryChange = countryChange;
				functions._finderClick = finderClick;
				functions._upload = upload_;
				functions._referenceClick = referenceClick;
				functions._finderAddressClick = finderAddressClick;
				functions._finderTreeClick = finderTreeClick;
				functions._refreshData = refreshData;
				
				// check custom related picklist value.
				GUIUtils.checkCustomPicklistValue(item,fields,entity,this);
				
				var inputFields:ArrayCollection = new ArrayCollection();		
				for (var i:int = 0; i < fields.length; i++) {
					
					//Bug fixing 466 CRO only display form not editable fields
					if(isReadOnlyFields){
						fields[i].readonly = isReadOnlyFields;
					}
					//bug #1912
					if(readOnlyFields[fields[i].column_name] != null && readOnlyFields[fields[i].column_name]){
						fields[i].readonly = true;	
					}
					
					//Change Request # 781 CRO
					/*if(fields[i].column_name.indexOf("CustomPickList10") >-1 && (fields[i].readonly == null || fields[i].readonly == false)){
						btnAP.enabled = true;
						btnSU.enabled = true;
					}
					if(fields[i].column_name.indexOf("CustomPickList11") >-1 && (fields[i].readonly == null || fields[i].readonly == false)){
						btnTC.enabled = true;	
					}*/
					
					// index of page
					pageIndex = fields[i].col==1?0:fields[i].col/2;
					if(pageIndex>=numOfPage) continue;
					
					var objHeight:int = 26;
					var displayObj:DisplayObject;					
					if (fields[i].custom != null) {
						if (fields[i].column_name.indexOf(CustomLayout.SQLLIST_CODE)>-1) {
							var objectSQLQuery:Object = SQLUtils.checkQueryGrid(fields[i].custom, item);
							objectSQLQuery['column_name'] = fields[i].column_name;
							if (objectSQLQuery.error) {
								displayObj = GUIUtils.getHeader(i18n._('GUIUTILS_SQL_SYNTAX_ERROR'));
							} else {
								objHeight = 255;
								// #332: TCS - Change Request - 7. Milestone: Services Request and Equipment history list (29)
								// if(this.create && isValidSpecifyByUser()) objectSQLQuery.sqlString = objectSQLQuery.sqlString.toString().replace(/=/, "=''");
								//remove isValidSpecifyByUser() #668 CRO
								
								if(this.create && objectSQLQuery.sqlString.toString().indexOf(DUMMY_OID)<0){
									//Bug #668 CRO
									objectSQLQuery.sqlString = objectSQLQuery.sqlString.toString().replace(/''/, "");
									objectSQLQuery.sqlString = objectSQLQuery.sqlString.toString().replace(/=/, "=''");
								} 
								displayObj = GUIUtils.getQueryGrid(objectSQLQuery, this, subtype, fields[i].readonly,showBarCode_clickHandler,isReadOnlyFields);
								listChild.addItem(objectSQLQuery.entity);
								sqlQueryObjects.addItem({'objectSQLQuery': objectSQLQuery, 'displayObj': displayObj});
							}
						} 
						else if (fields[i].column_name.indexOf(CustomLayout.SQLFIELD_CODE)>-1 && !create) {
							var objectSQLLIST:Object = SQLUtils.checkQueryField(fields[i].custom, item);
							if (objectSQLLIST.error) {
								displayObj = GUIUtils.getHeader(i18n._('GUIUTILS_SQL_SYNTAX_ERROR'));
							} else {
								displayObj = GUIUtils.getSQLField(objectSQLLIST);
							}
						}
						else if (fields[i].column_name.indexOf(CustomLayout.CALCULATED_CODE)>-1) {
							var objectCustomField:Object = fields[i].customField;
							if (!objectCustomField) {
								displayObj = GUIUtils.getHeader(i18n._('Empty Formula'));
							} else {
								displayObj = GUIUtils.getFormulaField(objectCustomField,item,fields);
							}
						}
						
						else if (fields[i].column_name.indexOf(CustomLayout.HTMLFIELD_CODE)>-1 && !create) {
							var value:String = SQLUtils.setParams(fields[i].custom, item, false);
							displayObj = GUIUtils.getButtonLink(value, value, "", childObj, ImageUtils.websiteIcon);					
						}
						
						else if (fields[i].column_name.indexOf(CustomLayout.NEWS_CODE)>-1 && !create) {
							objHeight = 185;
							displayObj = GUIUtils.getNewsGrid(this, item, fields[i].custom);	
							
						}
						
						else if (fields[i].column_name.indexOf(CustomLayout.RELATION_CODE)>-1) {
							//if( item.gadget_type == null || (item.gadget_type == "Contact" && entity == "Activity") ) item.gadget_type = entity; //need it to display the relative list for creating new record
							//check relation
							var relation:Object = Relation.getMNRelation(item.gadget_type, fields[i].custom);
							if(relation==null){
								//delete from db
								Database.layoutDao.delete_({entity:item.gadget_type,subtype:fields[i].subtype,custom:fields[i].custom,row:fields[i].row,col:fields[i].col});
								continue;
							}
							
							objHeight = 185;
							displayObj = GUIUtils.getRelationGrid(this, item, fields[i].custom, fields[i].readonly, refreshLinkList);
							listChild.addItem(relation.supportTable);
						}
						
						else if(fields[i].column_name.indexOf("#")>-1){
							displayObj = GUIUtils.getHeaderTranslate(fields[i]);
						}
					} else {
						if(fields[i].column_name.indexOf(CustomLayout.CUSTOMFIELD_CODE)>-1){
							var objectCustomField2:Object = Database.customFieldDao.selectCustomField(entity,fields[i].column_name,LocaleService.getLanguageInfo().LanguageCode);
							if(objectCustomField2){
								fields[i].customField = objectCustomField2;
								if(objectCustomField2.fieldType=="Formula"){
									displayObj = GUIUtils.getFormulaField(objectCustomField2,item,fields);									
									createFieldLayout(displayObj,objHeight,i,pageIndex);
									fields[i].component = (displayObj as FormItem).getChildAt(0);
									inputFields.addItem({'formField':fieldInfo, 'component':fields[i].component});
									continue;
								}else if(objectCustomField2.fieldType=="Sum"){
									var objSum:Object = new Object();
									var itemUpdate:Object = new Object(); // store copy field use for update to db
									objSum.sql = objectCustomField2.value;
									objSum["entityId"] = objectCustomField2.relation_id;
									objSum[objectCustomField2.relation_id] = item[objectCustomField2.relation_id];
									var v:Number = Database.getDao(entity).sumFields(objSum).sumFields;
									displayObj = GUIUtils.getSumFields(objectCustomField2.displayName, v + "" );
									createFieldLayout(displayObj,objHeight,i,pageIndex);
									if(objectCustomField2.field_copy != null){  // only update field copy if no field not update
										
										item[objectCustomField2.field_copy] = v;
										//if(!create){
										//	updateFieldCopy(objectCustomField2.field_copy);
										//}
									}
									continue;
								}else{
									item[fields[i].column_name] = item[objectCustomField2.fieldName];
								}
								if(objectCustomField2.fieldType=="Related Picklist"){
									objectCustomField2.fieldType ="Picklist";
								}	
								customFields.addItem(objectCustomField2.fieldName);
							}
						}	
						var fieldInfo:Object = FieldUtils.getField(entity, fields[i].column_name);
						
						if(!fieldInfo) { noFieldInfo=true; continue; }
						
						if(fieldInfo.required && create && fields[i].readonly==true){
							fields[i].readonly = false;
						}
						displayObj = new FormItem();
						if(fieldInfo.data_type.indexOf("Currency") != -1 && item.CurrencyCode != null && item.CurrencyCode != ""){
							(displayObj as FormItem).label = fieldInfo.display_name + " (" + item.CurrencyCode + ")";
						}else{
							(displayObj as FormItem).label = fieldInfo.display_name;
						}
						
						if (fieldInfo.required != true && fields[i].mandatory != null) fieldInfo.required = fields[i].mandatory;
						(displayObj as FormItem).required = fieldInfo.required;
						(displayObj as FormItem).setStyle("labelWidth", 150);
						//(entity:String, item:Object, subtype:int, bContactLinkActivity:Boolean, create:Boolean, fieldInfo:Object, readonly:Boolean, referenceClick:Function, finderClick:Function, openLocalFileDialog:Function)
						//var childObj:DisplayObject = getChildObjEdit(fieldInfo, fields[i].readonly);
						
						var childObj:DisplayObject = GUIUtils.getInputField(create, functions, entity, item, fieldInfo, fields[i].readonly,false,fields);
						if(fields[i].max_chars != null ){
						
							if(childObj is TextArea){
								(childObj as TextArea).maxChars = Number(fields[i].max_chars);
							}else if(childObj is TextInput){
								(childObj as TextInput).maxChars = Number(fields[i].max_chars);
							}
						}
						if(childObj is UIComponent) 
							(childObj as UIComponent).addEventListener(Event.CHANGE, function(event:Event):void {
								setTitleAsEdit();
							});
						
						if(mapAddressFields.indexOf(fieldInfo.element_name) != -1) addr[fieldInfo.element_name]=childObj;		
						// #332: TCS - Change Request - 7. Milestone: Services Request and Equipment history list (29)
						if((childObj is TextInput) && fieldInfo.element_name=='CustomText36' && isValidSpecifyByUser()) {
							(childObj as TextInput).addEventListener(Event.CHANGE, function(e:Event):void {
								var eNum:String = "'" + (e.currentTarget as TextInput).text + "'";
								filterServiceRequestByEquipmentNumber(eNum);
							});
						}
						var textInputProbability:TextInput, picklistSalesStage:ComboBox;
						if(create) {
							// set the default value for probablity
							if(picklistSalesStage && textInputProbability) {
								textInputProbability.text = picklistSalesStage.selectedItem.probability;
							}
						}
						
						var isAcction:Boolean =Database.customLayoutDao.checkExisted(entity,fieldInfo.element_name);
						// action combo RecordType 
						if((entity == Database.accountDao.entity || entity == Database.activityDao.entity) && isAcction
							&& childObj is ComboBox){
							// for only sieme user //
							var combo:ComboBox = childObj as ComboBox;
							// disable field record type
							
							if(create && subtypeActivity ==0){
								if(selectedAccountType != null){
									//combo.enabled = false;
									combo.selectedIndex = CalculatedField.getComboSelectedIndex(combo,selectedAccountType.data);
								}
								combo.addEventListener(Event.CHANGE,function(e:Event):void{
									fireEventRecordTypeChange(e.target as ComboBox)
								});
							}else if(!create){
								if(type=='Task' || entity == "Account"){
									var obj2:Object = combo.selectedItem;
									if(obj2 != null && !StringUtils.isEmpty(obj2.data)){
										combo.enabled = false;
									}else if(selectedAccountType != null){
										combo.selectedIndex = CalculatedField.getComboSelectedIndex(combo,selectedAccountType.data);
										combo.enabled = false;
									}
									combo.addEventListener(Event.CHANGE,function(e:Event):void{
										fireEventRecordTypeChange(e.target as ComboBox)
									});
								}
								
							}
						} 
						
						// probability textinput
						// this value is relative to the salesstage picklist
						if((childObj is TextInput) && fieldInfo.element_name=='Probability') textInputProbability = childObj as TextInput;
						// --- VM bug #328 ---> 11/Feb/2011 
						if((childObj is TextInput) && fieldInfo.element_name=='CreatedBy' || fieldInfo.element_name=='ModifiedBy') {
							var editableText:TextInput = childObj as TextInput;
							editableText.editable = false;
							editableText.selectable = true;
							editableText.setStyle('borderStyle', 'none');
							editableText.setStyle("fontWeight", "bold");
							

						}
						// salesstage picklist
						// set value to probability textinput
						if((childObj is ComboBox) && fieldInfo.element_name=='SalesStage') {
							picklistSalesStage = (childObj as ComboBox);
							(childObj as ComboBox).addEventListener(Event.CHANGE, function(e:Event):void {
								var salesStage:Object =(e.currentTarget as ComboBox).selectedItem;
								if(salesStage && textInputProbability) textInputProbability.text = salesStage.probability;
							});
						}
						//bug #74
						if((childObj is ComboBox) && fieldInfo.element_name=='Status' && entity=="Account" && create==true) {
							(childObj as ComboBox).selectedIndex = 1;
						}
						if((childObj is Text) && fieldInfo.element_name=='CurrencyCode' && entity=="Account" && create==true) {
							(childObj as Text).text = "GBP";
						}
						if(childObj is HBox) {
							var hBoxChilds:Array = (childObj as HBox).getChildren();
							var linkButtonExclude:Array =["Website", "Send mail"];
							for each(var o:Object in hBoxChilds) {
								if(o is DateField) {
									(o as DateField).addEventListener(CalendarLayoutChangeEvent.CHANGE, function(e:Event):void {
										setTitleAsEdit();
									});
									if(create && item.gadget_type=="Activity" && (item.Activity=="Appointment" || item.Activity=="Call")){
										if((o as DateField).selectedDate == null)
											(o as DateField).selectedDate = new Date();
									}
								}else if(o is NumericStepper) {
									(o as NumericStepper).addEventListener(NumericStepperEvent.CHANGE, function(e:Event):void {
										setTitleAsEdit();
									});
								}else if(o is LinkButton) {
									var linkButton:LinkButton = (o as LinkButton);
									// don't add event mouse click on link button webstie and send mail otherwise we added
									if(!(linkButtonExclude.indexOf(linkButton.toolTip) > -1 ? true : false))
										linkButton.addEventListener(MouseEvent.CLICK, function(e:Event):void {
											setTitleAsEdit();
										});
								}else if(o is TextInput) {
									(o as TextInput).addEventListener(Event.CHANGE, function(e:Event):void {
										setTitleAsEdit();
									});
								}
							}
						}
						
						
						
//						var childObj:DisplayObject = GUIUtils.getChildObjEdit(entity, item, bContactLinkActivity, create, fieldInfo, 
//							fields[i].readonly, getFinderControl, getPictureObj, getTitle, getAddress, referenceClick, finderClick, openLocalFileDialog);
						if (childObj is TextArea) {
							objHeight = 104;
						}
						if (fieldInfo.data_type == 'Picture' || fieldInfo.data_type == '{' + CustomLayout.GOOGLEMAP_CODE + '}' || fieldInfo.data_type == 'Multi-Select Picklist') {
							objHeight = 190;
						}

						if(!fields[i].readonly){
							validators = validators.concat(FieldUtils.getValidators(fieldInfo, childObj));
						}
						
						
						if (childObj != null) {
							
							inputFields.addItem({'formField':fieldInfo, 'component':childObj});
							
							if(fields[i].row==1 && fields[i].col == 0)
								nameFocus = fields[i].column_name;
							fields[i].component = childObj;
							childObj.width = 264;
							childObj.name = fields[i].column_name;
							(displayObj as FormItem).addChild(childObj);
							displayObj.name = fields[i].column_name;
							
							// button remove object relation
							if(childObj is ImageTextInput) {
								var iTextInputChilds:Array = ((childObj as ImageTextInput).getChildAt(0) as HBox).getChildren();
								for each(var child:Object in iTextInputChilds) {
									if(child is LinkButton) {
										(child as LinkButton).addEventListener(MouseEvent.CLICK, function(e:Event):void {
											setModifiedAndReload();
										});
									}
								}
							}
							
						}
					}
					createFieldLayout(displayObj,objHeight,i,pageIndex);

					if (fieldInfo != null) {
						if(fieldInfo.required == true && isAlreadyFocus == false){
							isAlreadyFocus = true;
							if (fields[i].component is IFocusManagerComponent) {
								componentFirstFocus = fields[i].component as IFocusManagerComponent;
							}
						}
					}
					
				}
				
				// setup cascading picklists
				for each (var inputFieldObj:Object in inputFields){
					GUIUtils.setupCascadingCombo(inputFieldObj.component, inputFieldObj.formField, inputFields);
				}
				
				// setup window dimensions
				for(var p:int=0;p<numOfPage;p++){
					if (leftFormL[p].getChildren().length == 0 &&
						rightFormL[p].getChildren().length == 0) {
						viewstack.removeChild(innerCanvasL[p]);
						continue;
					}
					
					var heightMax:int = heightLeftL[p];
					if (heightRightL[p] > heightMax) {
						heightMax = heightRightL[p];
					}
					if (rightFormL[p].getChildren().length == 0 && pageIndex == 0) {
						// width = 500;
						//width = 660;
						vruleL[p].visible = false;
						rightFormL[p].visible = false;
					} else {
						//width = 980;
						vruleL[p].visible = true;
						rightFormL[p].visible = true;
						
					}
					detailCanvas.width = width;
					buttonCanvas.width = width - 20;
					if (heightMax < 70) {
						heightMax = 70;
					}
					innerCanvasL[p].height = heightMax + 15;
					vruleL[p].height = heightMax;
					heightMax += 138;
					//height = heightMax>height?heightMax:height; 
					
				}
				viewstack.setStyle("tabHeight",pageIndex==0?0:24);
				if(pageIndex==0) height -=24;
				
				//PreferenceUtils.WindowScreenBounds(this);				
				detailCanvas.height = height;
				modified = false;
				this.enabled = true;
				if(item.objTree!=null){
					refreshData();
				}
				
				
			}
			
		
			private function updateFieldCopy(field_copy:String):void{
				
				var itemUpdate:Object = new Object();
				itemUpdate["gadget_id"] = item["gadget_id"];
				itemUpdate[field_copy] = item[field_copy];
				itemUpdate['local_update'] = item.local_update;
				itemUpdate['deleted'] =item.deleted;
				itemUpdate['error'] = item.error;
				itemUpdate['sync_number'] = item.sync_number;
				itemUpdate['ood_lastmodified']=item.ood_lastmodified;
				Database.getDao(entity).updateByField([field_copy],itemUpdate);
				
			}
			
			private function createFieldLayout(displayObj:DisplayObject,objHeight:int,i:int,pageIndex:int):void{
				displayObj.height = objHeight;	
				if(fields[i].col%2==0){
					leftFormL[pageIndex].addChild(displayObj);
					heightLeftL[pageIndex] += displayObj.height + 4;
				}else{
					rightFormL[pageIndex].addChild(displayObj);
					heightRightL[pageIndex] += displayObj.height + 4;
				} 
			}
	
			
			// #332: TCS - Change Request - 7. Milestone: Services Request and Equipment history list (29)
			private function isValidSpecifyByUser():Boolean {
				return (this.entity=="Service Request" && UserService.getCustomerId()==UserService.DIVERSEY);
			}
			
			// #332: TCS - Change Request - 7. Milestone: Services Request and Equipment history list (29)
			private function filterServiceRequestByEquipmentNumber(eNum:String=null):void {
				for each(var sqlQueryObject:Object in sqlQueryObjects) {
					var objectSQLQuery:Object = sqlQueryObject.objectSQLQuery;
					var displayObj:DisplayObject = sqlQueryObject.displayObj;
					if(displayObj is VBox) {
						objectSQLQuery.sqlString = objectSQLQuery.sqlString.toString().replace(/'(\w+?\w+|\w?)'/, eNum);
						var grid:DataGrid = ((displayObj as VBox).getChildAt(0)) as DataGrid;
						grid.dataProvider = Database.queryDao.executeQuery(objectSQLQuery.sqlString);
						(grid.dataProvider as ArrayCollection).refresh();
					}
				}
			}
			
			public function refreshLinkList():void{
				var list:List = mainWindow.navigator.selectedChild as List;
				list.linkList.source = list.list.selectedItem;
				list.linkList.listLinks();
				setModifiedAndReload();
			}
			
			private function referenceClick(event:MouseEvent):void {
				updateItemFields();
				var itemFinder:ItemFinder = new ItemFinder();
				itemFinder.relation = (event.currentTarget as TextInput).data;
				itemFinder.textInput = (event.currentTarget as TextInput);
				itemFinder.item = item;
				itemFinder.reload = setModifiedAndReload;
				// bug #113 fix
				if (UserService.getCustomerId() == UserService.VETOQUINOL) {
					if (itemFinder.relation.entitySrc == "Activity" && itemFinder.relation.entityDest == "Contact" && item["AccountId"] != null && item["AccountId"] != "") {
						itemFinder.filter = "AccountId = '" + item["AccountId"] + "'";
					}				
				}
				// end bug #113 fix
				WindowManager.openModal(itemFinder);
			}

			private function finderClick(event:MouseEvent):void {
				updateItemFields();
				var finder:GenericFinder = new GenericFinder();
				finder.textInput = (event.currentTarget as TextInput);
				finder.item = item;
				finder.reload = setModifiedAndReload;
				finder.dataQuery = event.target.document.data;
				WindowManager.openModal(finder);
			}
			
			private function countryChange(event:Event):void {
				checkAutoComplete(false);
			}
			
			private function finderTreeClick(e:Event):void {
				var treeFinder:TreeFinder = new TreeFinder();
				treeFinder.textInput = (e.currentTarget as TextInput);
				treeFinder.item = item;
				treeFinder.fieldInfo = ((e.currentTarget as TextInput).parentDocument as ImageTreeFinder).fieldInfo;
				treeFinder.reload = setModifiedAndReload;
				WindowManager.openModal(treeFinder);
			}
			
			private function finderAddressClick(event:Event):void {
				var selected:Object = (event.currentTarget as AutoCompleteAddress).selectedItem;
				if(selected) {
//					for each(var disObj:DisplayObject in addr) {
//						if(disObj is TextInput) {
//							(disObj as TextInput).text = selected.city
//						}
////						else if(disObj is AutoComplete) {
////							(disObj as AutoComplete).setFocus();
////							(disObj as AutoComplete).typedText = selected.country;
////						}
//					}
					
					for each(var key:String in mapAddressFields){
						var disObj:DisplayObject = addr[key];
						if(disObj is TextInput) {
							(disObj as TextInput).text = selected[key];
						}else if(disObj is AutoComplete) { 
							//(disObj as AutoComplete).text = selected[key];
							(disObj as AutoComplete).typedText = selected[key];
						}
					}
					
					(event.currentTarget as AutoCompleteAddress).text = selected.data;					
					
				}
			}
			
			public function setModifiedAndReload():void {
				setTitleAsEdit();
				refreshData();
			}
			
			//CH
			//Bug #1727: update the sum in expenses report change from private to public CRO
			public function refreshData():void{
				for(var i:int=0; i<fields.length; i++){
					if (!StringUtils.startsWith(fields[i].column_name, "#") && !StringUtils.startsWith(fields[i].column_name, "{")) {
						var fieldInfo:Object = FieldUtils.getField(entity, fields[i].column_name);
						if(fieldInfo && fieldInfo.element_name!="picture"){
							GUIUtils.setInputFieldValue(fields[i].component, fieldInfo, item[fieldInfo.element_name],fields[i].customField,fields);
						}
					}
					
				}
			}
			
			private function resetEmpty(childObj:DisplayObject):void{
				if (childObj is TextInput) {		
					(childObj as TextInput).text = "";
				} else if (childObj is AutoComplete) {
					(childObj as AutoComplete).typedText="";
				} else if (childObj is ComboBox) {
					(childObj as ComboBox).selectedItem = "";
				} else if (childObj is CheckBox) {
					(childObj as CheckBox).selected = false;
				} else if (childObj is DateField) {
					(childObj as DateField).text ="";
				} 
			}
			
			private function upload(file:File):void {
				var data:ByteArray = Utils.getContentFile(file);
				Database.contactDao.updateImage(data, item);
				reload();
			}
			
						
			private var currentSelected:int = 0;
			public function reload():void {
				validators = [];
				viewstack.removeAllChildren();
				initTab();
				initForm();
				if(viewstack.getChildren().length<=currentSelected){
					currentSelected = 0;
				}				
				viewstack.selectedIndex = currentSelected;
				if(currentSelected != -1) // Bug new custom layout no field 
					if(viewstack.getChildren().length > 0){
						(viewstack.getTabAt(currentSelected) as Button).setFocus();
					}
			}
			
			private function editLayout():void {
				var layout:CustomLayout = new CustomLayout();
				layout.entity = entity;
				layout.item = item;
				layout.detail = this;
				currentSelected = viewstack.selectedIndex;
				WindowManager.openModal(layout);
			}
			
			private function openAttachmentFileLayout():void {
				var attachmentDlg:Attachment = new Attachment();
				attachmentDlg.detail = this;
				WindowManager.openModal(attachmentDlg);	
			}
			
			private function openValidationList():void {
				var validationList:ValidationList = new ValidationList();
				validationList.entity = entity;
				WindowManager.openModal(validationList);
			}
			
			
			private function onDragIn(event:NativeDragEvent):void {
				//check and see if files are being drug in
				if(event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
				{
					//get the array of files
					var files:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
					
					//make sure only one file is dragged in (i.e. this app doesn’t support dragging in multiple files)
					if(files.length == 1)
					{
						//accept the drag action
						DragManager.acceptDragDrop(this);
					}
				}
			}
			
			private function modifiedLocalUpdateItem():void{
				item.local_update = new Date().getTime();
				item.deleted = 0;
				Database.getDao(entity).update(item);
				refreshFunction(item);
			}
			
			//called when the user drops an item over the component
			private function onDragDrop(event:NativeDragEvent):void {
				if (!create) {
					var arr:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
					var file:File = arr[0] as File;
	   				
	   				var itemName:String = '';
	   				switch(entity){
	   					case 'Account': itemName = item.AccountName; break;
	   					case 'Contact': itemName = item.ContactLastName + ' ' + item.ContactFirstName;
	   						if (EXTENSION_IMAGE_FILE.indexOf(file.type) < 0) {
	   							Utils.upload(file, this.entity, this.item.gadget_id, displayAttachments, modifiedLocalUpdateItem);   	
								//CRO 05.01.2011
		   						Alert.show(i18n._('GLOBAL_ATTACHMENT') + ' ' +  file.name + ' ' + i18n._('DETAIL_ALERT_TEXT_WAS_ADDED_TO') + ' ' + entity + ' ' + itemName, i18n._('GLOBAL_ATTACHMENTS'),Alert.OK,this);
	   						} else {
								var data:ByteArray = Utils.getContentFile(file);
	   							Database.contactDao.updateImage(data, item);
			   					var displayObj:FormItem = leftFormL[0].getChildByName("picture") as FormItem;
			   					if (displayObj==null) {
			   						displayObj = rightFormL[0].getChildByName("picture") as FormItem;
			   					}
			   					var childObj:HBox = displayObj.getChildAt(0) as HBox;
			   					var canvasObj:Canvas = childObj.getChildAt(0) as Canvas;
			   					var img : Image = canvasObj.getChildAt(0) as Image;
			   					img.source = item["picture"]; 
	   						}
	   						return ;
	   						//break;
	   					case 'Opportunity': itemName = item.OpportunityName; break;
	   					case 'Activity': itemName = item.Subject; break;
	   					case 'Product': itemName = item.Name; break;
	   					case 'Service Request': itemName = item.SRNumber; break;
	   					case 'Campaign' : itemName = item.CampaignName; break;
	   				}
	   				Utils.upload(file, this.entity, this.item.gadget_id, displayAttachments, modifiedLocalUpdateItem);   		
					//CRO 05.01.2011
					Alert.show(i18n._('GLOBAL_ATTACHMENT') + ' ' +  file.name + ' ' + i18n._('DETAIL_ALERT_TEXT_WAS_ADDED_TO') + ' ' + entity + ' ' + itemName, i18n._('GLOBAL_ATTACHMENTS'),Alert.OK,this);
		  		}else{
					//CRO 05.01.2011
		  			Alert.show(i18n._('DETAIL_ALERT_TEXT_CAN_NOT_DROP_FILE_TO_ATTACHMENT'), i18n._('GLOBAL_ATTACHMENTS'),Alert.OK,this);
		  		}
			}
						
			
			private function initDragDropWindow():void {
				//register for the drag enter event
				this.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, onDragIn);
				//register for the drag drop event
				this.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, onDragDrop);
			}
			
			private function exportToPDF():void {
				PDFUtil.detailToPDF(entity,subtype,item,create,logo_error_message);
			}
			
			private function logo_error_message():void{
				//CRO 05.01.2011
				Alert.show(i18n._('GLOBAL_ALERT_MSG_LOGO_ERROR'), "", Alert.OK, this);
			}
			
			
			//Bug fixing 466 CRO show detail on sql grid double click
			private function disableIcon():void{
				if(isReadOnlyFields){ 
					customLayoutBtn.visible = false;
					attachmentBtn.visible = false;
					validationBtn.visible = false;
					pdfExportBtn.includeInLayout = false;
					pdfExportBtn.visible = false;
					comboAction.visible = false;
				}
			}
			
			// Feature #56 Integration of Barcode scanner
			protected function showBarCode_clickHandler(event:MouseEvent,batchInserList:String=""):void{
				
				if(!StringUtils.isEmpty(batchInserList)){  // C.R #463 Insert more material numbers at once
					generateBarCodeReader(batchInserList);  
				}else{
					var os:String = flash.system.Capabilities.os.substr(0, 3);
					var touchscreenType:String = flash.system.Capabilities.touchscreenType;
					flash.system.Capabilities.touchscreenType.length;
					if (!(os == "Win")) {
						Alert.show(i18n._("BarCode Scanner suport only on Widnow OS.") , i18n._("Not Suport OS"), Alert.OK, this);
						return;
					}else{
						barcodeReader.generateBarCodeReader = generateBarCodeReader;
						barcodeReader.show_BarcodeReader();
						this.enabled =  false;
					}
				}
				
				
			}
			
			
			protected function generateBarCodeReader(barCodeList:String,readBarcode:Boolean=false):void{
				if(barCodeList.indexOf("Cancel")<0){
					barCodeList = StringUtil.trim(barCodeList);
					var codeList:Array = barCodeList.split(",");
					getProductList(codeList,"Custom Object 2",readBarcode);
				}
				this.enabled = true;
			}
			
			protected function doSaveCO2(listCo2:ArrayCollection,entity:String):void{
				Database.begin();
				try{
					for each(var co2:Object in listCo2){
						var dao:BaseDAO = Database.getDao(entity);
						try {
							dao.insert(co2);
						} catch (e:SQLError) {
							Alert.show(e.toString(), i18n._('MINIDETAIL_ALERT_TITLE_CANNOT_CREATE_RECORD'), Alert.CANCEL, this);
							return;
						}
						co2 = dao.selectLastRecord()[0];
						// by default, sets the OracleId as gadget_id
						co2[DAOUtils.getOracleId(entity)] = "#" + co2.gadget_id;
						Database.getDao(entity).update(co2);
					}
					Database.commit();
				}catch(e:SQLError){
					Database.rollback();
				}
				// refresh data grid.
				//grid.dataProvider = Database.queryDao.executeQuery(objectSQLQuery.sqlString);
				innerListUpdate();
				//(grid.dataProvider as ArrayCollection).refresh(); break;
				for each(var sqlQueryObjectR:Object in sqlQueryObjects) {
					var objectSQLQueryR:Object = sqlQueryObjectR.objectSQLQuery;
					var displayObjR:DisplayObject = sqlQueryObjectR.displayObj;
					if(displayObjR is VBox && objectSQLQueryR.entity==entity) {
						var gridR:DataGrid = ((displayObjR as VBox).getChildAt(0)) as DataGrid;
						gridR.dataProvider = Database.queryDao.executeQuery(objectSQLQueryR.sqlString);
						//CRO picklist display Code to Value
						var data:ArrayCollection = gridR.dataProvider as ArrayCollection;
						GUIUtils.mapPickListValueSqlGrid(data,sqlQueryObjectR.objectSQLQuery);
						//--------------------
						(gridR.dataProvider as ArrayCollection).refresh();
					}
				}	
			}
			
			public function getProductList(codeList:Array,entity:String,readBarcode:Boolean=false):void {
			    var listC02:ArrayCollection = new ArrayCollection();
				for each(var sqlQueryObject:Object in sqlQueryObjects) {
					var objectSQLQuery:Object = sqlQueryObject.objectSQLQuery;
					var displayObj:DisplayObject = sqlQueryObject.displayObj;
					if(displayObj is VBox && objectSQLQuery.entity==entity) {
						var grid:DataGrid = ((displayObj as VBox).getChildAt(0)) as DataGrid;
						var productList:ArrayCollection = new ArrayCollection();
						for(var idx:int=0;idx<codeList.length;idx++){
							var strCode:String = codeList[idx];
							var qty:int = 1;
							if(strCode.indexOf("=")>-1){
								qty = parseInt(strCode.split("=")[1]);
								if(qty==0){
									qty=1;
								}
							}
								
							var sqlQuery:String = "select * from product where Name='" + strCode.split("=")[0] + "'";
							if(readBarcode) sqlQuery = sqlQuery.replace("Name","IndexedShortText0"); // replaced Material Number by Barcode EAN 
							var objProduct:Object = Database.queryDao.executeQueryObject(sqlQuery);
							if(objProduct){
								var obj:Object = new Object();
								obj['ProductName'] = objProduct['Name'];
								obj['ServiceRequestNumber'] = item['SRNumber'];
								// obj['ServiceRequestId'] = item['ServiceRequestId'];
								var strid:String = item['ServiceRequestId'];
								// for each(var objField:Object in objectSQLQuery.fields){}
								for each (var ns:String in DAOUtils.getNameColumns(entity)) {
									if (!obj[ns]) obj[ns] = entity;
								}
								obj[DAOUtils.getOracleId(entity)] = null;
								obj["ProductId"] = objProduct["ProductId"];
								obj["deleted"] = false;
								obj["error"] = false;
								obj["OwnerId"] = Database.userDao.read().id;
								obj['ServiceRequestId'] = item['ServiceRequestId'];
								obj['IndexedNumber0'] = qty;   // quantity should be "1" 
								obj['IndexedPick0'] =    GUIUtils.findEvaluatorDefaultValue(entity,"IndexedPick0",obj); //"FOL";  //  AccountingIndicator should be "FOL"
								//#1002 CRO
								obj['mat_unit'] = Utils.getFormulaValue(entity,userOwner,obj,'mat_unit','mat_unit');
								obj['mat_desc'] = Utils.getFormulaValue(entity,userOwner,obj,'mat_desc','mat_desc');
								obj[BaseDAO.TEMP_COL]=true;
								listC02.addItem(obj);
								
							}								
							
						}		
						break;
						
					}
				}
				if(entity==Database.customObject2Dao.entity){
					if(MaterialUsedListWindow.checkCarStock(listC02)){
						doSaveCO2(listC02,entity);
					}else{
						Alert.show(i18n._("CAR_STOCK_EXCEED_MSG"), "", Alert.YES|Alert.NO, this, function(event:CloseEvent):void{
							if (event.detail==Alert.YES){
								doSaveCO2(listC02,entity);
							}
						});
					}
				}else{
				
					doSaveCO2(listC02,entity);
				
				}
				
			}

			protected function facebookBtn_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var linkButton:LinkButton = event.currentTarget as LinkButton;
				if(linkButton.id == "facebookBtn") {
					if(!StringUtils.isEmpty(item.facebook)) {
						openHTMLViewer(item);
					}else {
						openFacebookWindow(item);
					}
				}else if(linkButton.id == "linkedinBtn") {
					if(!StringUtils.isEmpty(item.linkedin)) {
						openHTMLViewer(item, false);
					}else {
						openFacebookWindow(item, false);
					}
				}
			}
			
			public static function openFacebookWindow(item:Object, facebook:Boolean=true, htmlViewer:HTMLViewer=null):void {
				// default is facebook otherwise is linkedin
				var facebookWindow:FacebookWindow = new FacebookWindow();
				facebookWindow.titleBarIcon = facebook ? ImageUtils.facebookIcon : ImageUtils.linkedinIcon;
				facebookWindow.titleBarLabel = facebook ? "Facebook" : "Linkedin";
				facebookWindow.htmlViewer = htmlViewer;
				facebookWindow.facebook = facebook;
				facebookWindow.item = item;
				WindowManager.openModal(facebookWindow);
			}
			
			private function openHTMLViewer(item:Object, facebook:Boolean=true):void {
				// default is facebook otherwise is linkedin
				var htmlViewer:HTMLViewer = new HTMLViewer();
				htmlViewer.facebook = facebook;
				htmlViewer.location = facebook ? item.facebook : item.linkedin;
				htmlViewer.titleBarIcon = facebook ? ImageUtils.facebookIcon : ImageUtils.linkedinIcon;
				htmlViewer.titleBarLabel = facebook ? "Facebook" : "Linkedin";
				htmlViewer.item = item;
				WindowManager.openModal(htmlViewer);
			}
			
			private function isFacebookLinkedin(key:String):Boolean {
				return (entity=='Contact' && Database.preferencesDao.getBooleanValue(key));
			}


			protected function btnComment_clickHandler(event:MouseEvent):void
			{
				var msgObj:Object = new Object();
				msgObj.Entity = entity;
				msgObj.IsParent = 'true';
				msgObj.CommentText = txtComment.text;
				FeedUtils.formatAndSendFeed( msgObj );
				txtComment.text = "";
			}


			protected function chkFeed_clickHandler(event:MouseEvent):void
			{
				txtComment.visible = chkFeed.selected;
				txtComment.includeInLayout = chkFeed.selected;
				btnComment.visible = chkFeed.selected;
				btnComment.includeInLayout = chkFeed.selected;
				validateNow();
			}


			protected function txtComment_keyDownHandler(event:KeyboardEvent):void
			{
				if( event.keyCode == Keyboard.ENTER && txtComment.text != "" ){
					btnComment_clickHandler(null);
				}
			}
			private var fMax:Boolean = false;
			private function viewRestoreMaxWindow():void {
				if (fMax) {
					fMax = false;
					restore();
				} else { 
					fMax = true; 
					maximize();
				}
			}
			public function closeMain():void{
				this.close();
				
			}
			private var currentTip:CloseableToolTip;
			public function checkTips():void {
				if (currentTip != null) {
					currentTip.close();
					currentTip = null;
				}
				
			}
		]]>		
		
	</mx:Script>
	
	<mx:Style source="styles.css"/>
	<mx:Canvas id="detailCanvas" horizontalScrollPolicy="off" styleName="main" left="0" top="0" width="980" height="240" right="0" bottom="0">
		<mx:Canvas id="windowTitleBar" backgroundColor = "#EEEEEE" styleName="titleBar" doubleClickEnabled="true" doubleClick="viewRestoreMaxWindow()" mouseDown="nativeWindow.startMove()" height="24" top="2" left="2" right="2">			
			<mx:Label id="titleLabel" text="CRM Gadget" top="0" left="4" />
			<mx:Button styleName="iconMinimize" height="16" width="16" top="2" right="36" click="minimize()"/>
			<mx:Button styleName="iconMaximize" height="16" width="16" top="2" right="20" click="viewRestoreMaxWindow()"/>
			<mx:Button styleName="iconClose" height="16" width="16" top="2" right="4" click="closeMain();"/>
		</mx:Canvas>
						  
		<mx:VBox width="100%" height="100%" paddingTop="35" paddingLeft="10" paddingRight="10" paddingBottom="50">
			<mx:HBox width="100%">
				<mx:CheckBox id="chkFeed" label="Enable Feed" click="chkFeed_clickHandler(event)"/>
				<mx:TextInput id="txtComment" width="100%" keyDown="txtComment_keyDownHandler(event)"/>
				<mx:Button id="btnComment" label="Post Comment" click="btnComment_clickHandler(event)"/>
			</mx:HBox>
			<mx:TabNavigator id="viewstack" width="100%" height="100%" tabHeight="24" creationPolicy="all"/>
		</mx:VBox>
		<mx:Canvas id="buttonCanvas" left="8" right="8" bottom="8" height="30">
			<mx:HBox left="8" right="8" horizontalGap="0">
				<mx:LinkButton id="customLayoutBtn" icon="@Embed('/assets/customize.png')" toolTip="{i18n._('DETAIL_LINKBUTTON_TOOLTIP_CUSTOMIZE_LAYOUT')}" click="editLayout()"/>
				<mx:LinkButton id="attachmentBtn" icon="@Embed('/assets/attachment.png')" click="openAttachmentFileLayout()" visible="{!create}"/>
				<mx:LinkButton id="validationBtn" icon="@Embed('/assets/validation_rules.png')" toolTip="{i18n._('DETAIL_LINKBUTTON_TOOLTIP_VALIDATION_RULE')}" click="openValidationList();" visible="{!create}"/>
				<mx:LinkButton id="pdfExportBtn" icon="{ImageUtils.pdfIcon}" toolTip="{i18n._('GLOBAL_PDF_EXPORT')}" click="Utils.showLoadingProgressWindow(exportToPDF, i18n._(StringUtils.LOADING_STR), i18n._(StringUtils.ATTACHMENTS_STR));" visible="{!create}"/>
				<mx:LinkButton id="groupingPDF" icon="{ImageUtils.reportIcon}" toolTip="{i18n._('GLOBAL_GROUPING_PDF')}" click="printServiceRequest(false)" includeInLayout="{showGroupingPDFBtn}" visible="{showGroupingPDFBtn}"/>
				<mx:LinkButton id="groupPDFPreview" icon="{ImageUtils.previewIcon}" toolTip="{i18n._('GLOBAL_GROUPING_PDF_PREVIEW')}" click="printServiceRequest(true)" includeInLayout="{showGroupingPDFBtn}" visible="{showGroupingPDFBtn}"/>
				<mx:LinkButton id="kitchenReport" icon="{ImageUtils.kitchenReportIcon}" toolTip="TCS Kitchen Report" click="diplayKitchenReport()" includeInLayout="{showKitchenReport}" visible="{showKitchenReport}"/>
				<mx:Button  id="btnAP" label="AP" click="setOrderUserStatus('AP')" includeInLayout="{showOrderUserStatusBtn}" visible="{showOrderUserStatusBtn}"/>
				<mx:Button  id="btnSU" label="SU" click="setOrderUserStatus('SU')" includeInLayout="{showOrderUserStatusBtn}" visible="{showOrderUserStatusBtn}"/>
				<mx:Button  id="btnTC" label="TC" click="setOrderUserStatus('TC')" includeInLayout="{showOrderUserStatusBtn}" visible="{showOrderUserStatusBtn}"/>
				<mx:Button  id="btnLeadConvert" label="Convert" click="openConvertLead()" visible="false"/>
				<mx:LinkButton id="facebookBtn" icon="{ImageUtils.facebookIcon}" toolTip="Facekook" click="facebookBtn_clickHandler(event)" includeInLayout="{isFacebookLinkedin(PreferencesDAO.ENABLE_FACEBOOK)}" visible="{isFacebookLinkedin(PreferencesDAO.ENABLE_FACEBOOK)}"/>
				<mx:LinkButton id="linkedinBtn" icon="{ImageUtils.linkedinIcon}" toolTip="Linkedin" click="facebookBtn_clickHandler(event)" includeInLayout="{isFacebookLinkedin(PreferencesDAO.ENABLE_LINKEDIN)}" visible="{isFacebookLinkedin(PreferencesDAO.ENABLE_LINKEDIN)}"/>
				<mx:HBox  horizontalAlign="right" width="100%">
					<mx:HBox id="layoutNextButton">
						<mx:Label text="{i18n._('DETAIL_LABEL_NEXT')}"/>
						<mx:ComboBox id="comboAction" width="120" dataProvider="{getComboData()}"/>
					</mx:HBox>		
					<mx:HBox id="actionCanvas" horizontalAlign="right"/>	
				</mx:HBox>					
			</mx:HBox>
		</mx:Canvas>
		<control:BarCodeReader id="barcodeReader" height="0" width="0" visible="false"/>
		<mx:VBox horizontalAlign="right" verticalAlign="bottom" width="100%" height="100%" paddingBottom="1" paddingRight="1">
			<mx:Image  source="@Embed('/assets/resize.png')" >
				
			</mx:Image>
		</mx:VBox>
	</mx:Canvas>
	
</mx:Window>
